<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:redis="http://www.springframework.org/schema/redis"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis.xsd">
    
    <!-- Scans for application @Components to deploy -->
    <context:component-scan base-package="org.flowninja.webapp.rspl.redis" />
    <context:component-scan base-package="org.flowninja.persistence.rspl.redis" />
    
    <context:annotation-config/>
    
    <tx:annotation-driven />

    <!--
        The JedisConnectionFactory is created from a JavaConfig which is sensitive to system property values
        - if both properties 'redis.master.nodes' (comma-seperated list of colon-seperated host /port pairs) and 'redis.master.name' (the master name)
          are given, then a Redis Sentinel-aware conection factory is being created
        - a connection factory for a single-host configuration is build with the hostname taken from 'redis.host' (defaults to "localhost") 
          and 'redis.port' (defaults to 6379)
    -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
        <property name="connectionFactory"  ref="jedisConnectionFactory"/>
        <property name="keySerializer">
            <bean class="org.flowninja.persistence.rspl.redis.components.CIDR4AddressRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer">
                <constructor-arg>
                    <value type="java.lang.Class">org.flowninja.persistence.rspl.generic.types.NetworkInformation</value>
                </constructor-arg>
            </bean>
        </property>
    </bean>
    
    <bean class="org.flowninja.persistence.rspl.redis.services.RedisRsplPersistenceService">
        <property name="masterTemplate" ref="redisTemplate"/>
        <property name="slaveTemplate" ref="redisTemplate"/> 
    </bean>
    
</beans>